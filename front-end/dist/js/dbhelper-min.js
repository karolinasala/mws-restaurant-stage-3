class DBHelper{static get DATABASE_URL(){return"http://localhost:1337/restaurants"}static get REVIEWS_URL(){return"http://localhost:1337/reviews"}static fetchRestaurants(e){const t=`${DBHelper.DATABASE_URL}`;fetch(t).then(t=>{200===t.status?t.json().then(t=>{e(null,t)}).catch(t=>{e(t,null)}):e(`Request failed. ${t.status}`,null)}).catch(t=>e(t,null))}static fetchRestaurantById(e,t){DBHelper.fetchRestaurants((a,n)=>{if(a)t(a,null);else{const a=n.find(t=>t.id==e);a?t(null,a):t("Restaurant does not exist",null)}})}static fetchRestaurantByCuisine(e,t){DBHelper.fetchRestaurants((a,n)=>{if(a)t(a,null);else{const a=n.filter(t=>t.cuisine_type==e);t(null,a)}})}static fetchRestaurantByNeighborhood(e,t){DBHelper.fetchRestaurants((a,n)=>{if(a)t(a,null);else{const a=n.filter(t=>t.neighborhood==e);t(null,a)}})}static fetchRestaurantByCuisineAndNeighborhood(e,t,a){DBHelper.fetchRestaurants((n,s)=>{if(n)a(n,null);else{let n=s;"all"!=e&&(n=n.filter(t=>t.cuisine_type==e)),"all"!=t&&(n=n.filter(e=>e.neighborhood==t)),a(null,n)}})}static fetchNeighborhoods(e){DBHelper.fetchRestaurants((t,a)=>{if(t)e(t,null);else{const t=a.map((e,t)=>a[t].neighborhood),n=t.filter((e,a)=>t.indexOf(e)==a);e(null,n)}})}static fetchCuisines(e){DBHelper.fetchRestaurants((t,a)=>{if(t)e(t,null);else{const t=a.map((e,t)=>a[t].cuisine_type),n=t.filter((e,a)=>t.indexOf(e)==a);e(null,n)}})}static fetchFavorite(e,t){let a={is_favorite:t};return fetch(DBHelper.DATABASE_URL+"/"+e+"/",{body:JSON.stringify(a),method:"PUT",headers:new Headers({"Content-Type":"application/json"})}).then(e=>e.ok?e.json():[{}]).then(a=>console.log(`Updated favorite restaurant: ${e} favorite : ${t}`))}static fetchReview(e){const t=`${DBHelper.REVIEWS_URL}`;fetch(t).then(t=>{200===t.status?t.json().then(t=>{e(null,t)}).catch(t=>{e(t,null)}):e(`Request failed. Returned status of ${t.status}`,null)}).catch(t=>e(t,null))}static fetchReviewById(e,t){const a=`${DBHelper.REVIEWS_URL}/?restaurant_id=${e}`;fetch(a).then(e=>{200===e.status?e.json().then(e=>{t(null,e)}).catch(e=>{t(e,null)}):t(`Request failed. Returned status of ${e.status}`,null)}).catch(e=>t(e,null))}static sendReview(e){return new Promise((t,a)=>{fetch(this.REVIEWS_URL,{body:JSON.stringify(e),method:"POST",headers:{"Content-Type":"application/json"}}).then(t).catch(a)})}static cacheReview(e){navigator.online||(window.localStorage.setItem("cache-review-"+e.restaurant_id,JSON.stringify(e)),this.watchReview(e.restaurant_id))}static watchReview(e){navigator.online?this.clearOffline(e):window.addEventListener("online",t=>{null!==window.localStorage.getItem("cache-review-"+e)&&this.clearOffline(e)})}static clearOffline(e){try{this.sendReview(JSON.parse(window.localStorage.getItem("cache-review-"+e))).then(t=>{window.localStorage.removeItem("cache-review-"+e),document.querySelectorAll(".offline").forEach(e=>{e.classList.remove("offline")})}).catch(console.error)}catch(e){console.error(e)}}static urlForRestaurant(e){return`./restaurant.html?id=${e.id}`}static imageUrlForRestaurant(e){return`/img/${e.photograph}.jpg`}static mapMarkerForRestaurant(e,t){return new google.maps.Marker({position:e.latlng,title:e.name,url:DBHelper.urlForRestaurant(e),map:t,animation:google.maps.Animation.DROP})}}
//# sourceMappingURL=data:application/json;charset=utf8;base64,
