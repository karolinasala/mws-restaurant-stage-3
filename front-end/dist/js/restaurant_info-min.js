let restaurant;var map;function showMap(){const e=document.getElementById("map"),t=document.getElementById("map-button");e.style.display="block",t.style.display="none"}window.initMap=(()=>{fetchRestaurantFromURL((e,t)=>{e?console.error(e):(self.map=new google.maps.Map(document.getElementById("map"),{zoom:16,center:t.latlng,scrollwheel:!1}),fillBreadcrumb(),DBHelper.mapMarkerForRestaurant(self.restaurant,self.map))})}),fetchRestaurantFromURL=(e=>{if(self.restaurant)return void e(null,self.restaurant);const t=getParameterByName("id");t?DBHelper.fetchRestaurantById(t,(t,n)=>{self.restaurant=n,n?(fillRestaurantHTML(),e(null,n)):console.error(t)}):(error="No restaurant id in URL",e(error,null))}),fetchReviewFromURL=(e=>{if(self.review)return void e(null,self.reviews);const t=getParameterByName("id");t?DBHelper.fetchReviewById(t,(e,t)=>{self.reviews=t,t?fillReviewsHTML():console.error(e)}):(error="No review id",e(error,null))}),fillRestaurantHTML=((e=self.restaurant)=>{document.getElementById("restaurant-name").innerHTML=e.name,document.getElementById("restaurant-address").innerHTML=e.address;const t=document.getElementById("restaurant-img");t.className="restaurant-img",t.src=DBHelper.imageUrlForRestaurant(e);const n=e.name+" in "+e.neighborhood;t.alt=n,document.getElementById("restaurant-cuisine").innerHTML=e.cuisine_type,e.operating_hours&&fillRestaurantHoursHTML(),fetchReviewFromURL()}),fillRestaurantHoursHTML=((e=self.restaurant.operating_hours)=>{const t=document.getElementById("restaurant-hours");for(let n in e){const r=document.createElement("tr"),a=document.createElement("td");a.innerHTML=n,r.appendChild(a);const l=document.createElement("td");l.innerHTML=e[n],r.appendChild(l),t.appendChild(r)}}),fillReviewsHTML=((e=self.reviews)=>{const t=document.getElementById("reviews-container"),n=document.createElement("h3");if(n.innerHTML="Reviews",t.appendChild(n),!e){const e=document.createElement("p");return e.innerHTML="No reviews yet!",void t.appendChild(e)}const r=document.getElementById("reviews-list");e.forEach(e=>{r.insertBefore(createReviewHTML(e),r.firstChild)}),t.appendChild(r)}),createReviewHTML=(e=>{const t=document.createElement("li"),n=document.createElement("p");n.innerHTML=e.name,t.appendChild(n);const r=document.createElement("p");r.innerHTML=`Rating: ${e.rating}`,t.appendChild(r);const a=document.createElement("p");return a.innerHTML=e.comments,t.appendChild(a),t}),fillBreadcrumb=((e=self.restaurant)=>{const t=document.getElementById("breadcrumb"),n=document.createElement("li"),r=document.createElement("a");r.innerHTML=e.name,r.setAttribute("aria-current","page"),n.appendChild(r),t.appendChild(n)}),getParameterByName=((e,t)=>{t||(t=window.location.href),e=e.replace(/[\[\]]/g,"\\$&");const n=new RegExp(`[?&]${e}(=([^&#]*)|&|#|$)`).exec(t);return n?n[2]?decodeURIComponent(n[2].replace(/\+/g," ")):"":null}),sendReview=(()=>{event.preventDefault();const e=getParameterByName("id"),t=document.querySelector("#name").value,n=parseInt(document.querySelector("#rating option:checked").value),r=document.querySelector("#comment").value,a={restaurant_id:parseInt(e),name:t,rating:n,comments:r,createdAt:Date.now(),updatedAt:Date.now()};DBHelper.sendReview(a).then(e=>{let t=document.getElementById("reviews-list");t.insertBefore(createReviewHTML(a),t.firstChild)}).catch(e=>{console.error(e);let t=document.getElementById("reviews-list");t.insertBefore(createReviewHTML(a,!0),t.firstChild),DBHelper.cacheReview(a)}),document.getElementById("review-form").reset()}),document.getElementById("send-review").addEventListener("click",sendReview);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
